TebLocalPlannerROS:

 odom_topic: odom
    
 # Trajectory
  
 teb_autosize: True #		## Enable automatic resizing of the trajectory w.r.t to the temporal resolution (recommended) 
 dt_ref: 0.3 #			## Desired temporal resolution of the trajectory (should be in the magniture of the underlying control rate)-- controller_frequency
 dt_hysteresis: 0.1 #		## Hysteresis for automatic resizing depending on the current temporal resolution (dt): usually 10% of dt_ref. 
 global_plan_overwrite_orientation: True #	## not sure
 allow_init_with_backwards_motion: True #	## muze startovat i smerem vzad
 max_global_plan_lookahead_dist: 3.0 #		## parametr ktery urcuje kolik z global planu se pouzije pro optimalizaci - nasobky velikosti local_cost_map	
 feasibility_check_no_poses: 2 #		## tohle urcuje pocet pozic, ktere se zkontroluji tesne predtim nez se rychlosti poslou robotu
    
 # Robot
         
 max_vel_x: 0.4 #	## need to be updated by real parameters
 max_vel_x_backwards: 0.2
 max_vel_y: 0.0
 max_vel_theta: 0.568 # the angular velocity is also bounded by min_turning_radius in case of a carlike robot (r = v / omega)
 acc_lim_x: 0.5
 acc_lim_theta: 0.5

 # ********************** Carlike robot parameters ********************

 min_turning_radius: 0.71 #0.70363   		## zkontrolovat ze pouzivame s lukem ty stejny kin. parametry
 # Min turning radius of the carlike robot (compute value using a model or adjust with rqt_reconfigure manually)
 wheelbase: 0.392 # Wheelbase of our robot
 cmd_angle_instead_rotvel: True # stage simulator takes the angle instead of the rotvel as input (twist message)
 
 # ********************************************************************
 #	## na vyber ze dvou modelu - two_circles X line		
 footprint_model: # types: "point", "circular", "two_circles", "line", "polygon"
   type: "two_circles"
   radius: 0.2 # for type "circular"
   line_start: [0.0, 0.0] # for type "line" #	## jednotky jsou v metrech
   line_end: [0.339, 0.0] # for type "line"
   front_offset: 0.325 # for type "two_circles"
   front_radius: 0.225 # for type "two_circles"
   rear_offset: -0.025 # for type "two_circles"
   rear_radius: 0.225 # for type "two_circles"
   vertices: [ [0.25, -0.05], [0.18, -0.05], [0.18, -0.18], [-0.19, -0.18], [-0.25, 0], [-0.19, 0.18], [0.18, 0.18], [0.18, 0.05], [0.25, 0.05] ] # for type "polygon"

 # GoalTolerance		## v metrech a radianech
    
 xy_goal_tolerance: 0.2
 yaw_goal_tolerance: 0.1
 free_goal_vel: False #		## Remove the goal velocity constraint such that the robot can arrive at the goal with maximum speed 
    
 # Obstacles
    
 min_obstacle_dist: 0.1 #0.225 		## This value must also include our robot's expansion, since footprint_model is set to "line". 
 #					## momentalne nastaveno "two circles"
 include_costmap_obstacles: True #	## uvazuje staticke prekazky, dynamicke jeste nedava, pri volbe rozliseni myslet i na vypocetni cas
 costmap_obstacles_behind_robot_dist: 1.0 #	## vzdalenosti prekazek, ktere se berou do uvahy pri planovani za robotem [m]
 obstacle_poses_affected: 30 #		## nejblizsi pozice k prekazce je stred a tohle je pocet pozic ktere se berou do uvahy pri kontrole okolo
 costmap_converter_spin_thread: True #	## If set to true, the costmap converter invokes its callback queue in a different thread 
 #					## snad nic nedela kdyz cost_map_converter je vypnutej - protoze nevim co dela
 costmap_converter_rate: 5 #		## Rate that defines how often the costmap_converter plugin processes the current costmap (the value should not be much
 #				## higher than the costmap update rate) [in Hz].

 # Optimization        		
 # 
 no_inner_iterations: 5 #       ## Each outerloop iteration automatically resizes the trajectory according to the desired temporal resolution dt_ref and invokes 
 no_outer_iterations: 4 # ## the internal optimizer (that performs no_inner_iterations). The total number of solver iterations in each planning cycle is
 optimization_activate: True #  ## therefore the product of both values. 
 optimization_verbose: False 
 penalty_epsilon: 0 # 		## melo by to posunout 0.225- okraj footprintu tak aby min_obstacle_distance - nahrazka "hard-constrains" -to asi nebude pravda
 # 				## byla vazne vzdalenost B2 od prekazky 
 weight_max_vel_x: 2 #          ## vybira veci k optimalizaci s patricnym durazem na jednotlive parametry
 weight_max_vel_theta: 1
 weight_acc_lim_x: 1
 weight_acc_lim_theta: 1
 weight_kinematics_nh: 1000
 weight_kinematics_forward_drive: 1
 weight_kinematics_turning_radius: 1
 weight_optimaltime: 1
 weight_obstacle: 50
 weight_dynamic_obstacle: 10 # not in use yet

 # Homotopy Class Planner

 enable_homotopy_class_planning: True #		## multiple trajectories are optimized at once - requires much more CPU 
 enable_multithreading: True #			## Activate multiple threading in order to plan each trajectory in a different thread 
 simple_exploration: False #			## ??
 max_number_classes: 4 #			## max trajektorii co se pociatji soucane
 selection_cost_hysteresis: 1.0 #		##  (selection if new_cost < old_cost*factor)
 selection_obst_cost_scale: 1.0 #               ## ??
 selection_alternative_time_cost: False #
 roadmap_graph_no_samples: 15 #
 roadmap_graph_area_width: 5 #			## velikost sirky roadmap in [m]
 h_signature_prescaler: 0.5 #			## reduce this parameter only, if you observe problems with too many obstacles in the local cost map
 h_signature_threshold: 0.1 #				## do not choose it extremly low, otherwise obstacles cannot be distinguished from each other (0.2<value<=1)
 obstacle_keypoint_offset: 0.1 #
 obstacle_heading_threshold: 0.45 #
 visualize_hc_graph: True
